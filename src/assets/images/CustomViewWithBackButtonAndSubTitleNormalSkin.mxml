<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5"
	height="100%" width="100%">
	<fx:Metadata>[HostComponent("spark.components.View")]</fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import com.fashionapp.utils.BasicUtil;
			
			import spark.components.View;
            /**
             *  @private
             */
			[Embed(source="assets/images/footerbackground.png")]
			[Bindable]
			private var FOOTER_BG:Class;
			
			[Embed(source="assets/images/backarrow.png")]
			[Bindable]
			private var BACK_ARROW:Class;
			
			[Embed(source="assets/images/openmenuicon.png")]
			[Bindable]
			private var OPEN_MENU:Class;
			
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    background.visible = false;
                }
                else
                {
                    background.visible = true;
                    bgFill.color = getStyle("backgroundColor");
                    bgFill.alpha = getStyle("backgroundAlpha");
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <!--- Defines the appearance of the SkinnableContainer class's background. -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor id="bgFill" color="#FFFFFF"/>
        </s:fill>
    </s:Rect>
    
    <!--
        Note: setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
    -->
	<s:Group height="100%" width="100%">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
		<s:BorderContainer borderVisible="false" height="{BasicUtil.getComponentHeight(70)}" width="100%"
						   backgroundColor="0xffffff">
			<s:VGroup width="100%" height="100%">
				<s:Label width="100%" text="{this.hostComponent.title}"
						 styleName="viewheader"
						 fontWeight="bold"
						 height="100%"
						 textAlign="center"
						 paddingLeft="10" paddingRight="10" maxDisplayedLines="1"
						 fontSize="{BasicUtil.getFontSize(24)}"
						 verticalAlign="middle"/>
				<s:Label horizontalCenter="0" bottom="3" fontSize="{BasicUtil.getFontSize(16)}" styleName="viewtext" id="subTitle"
						 height="100%" textAlign="center"
						 verticalAlign="middle"
						 width="100%"/>
			</s:VGroup>
			
			<s:Image source="{BACK_ARROW}" scaleMode="stretch" height="{BasicUtil.getComponentHeight(30)}" width="{BasicUtil.getComponentHeight(17)}"
					 verticalCenter="0"
					 click="{(this.hostComponent as View).navigator.popView()}"
					 left="10"
					 smooth="true"/>
			<s:Image source="{OPEN_MENU}" scaleMode="stretch" height="{BasicUtil.getComponentHeight(15)}" width="{BasicUtil.getComponentHeight(30)}" verticalCenter="0"
					 click="{this.dispatchEvent(new Event('openMenuClicked',true))}"
					 right="10"
					 smooth="true"/>
		</s:BorderContainer>
		<s:Group id="contentGroup" height="100%" width="100%" minWidth="0" minHeight="0">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
		</s:Group>
		<s:Image scaleMode="stretch" height="{BasicUtil.getComponentHeight(70)}" smooth="true" source="{FOOTER_BG}" width="100%"/>
	</s:Group>
    <!--- @copy spark.components.SkinnableContainer#contentGroup -->
</s:Skin>
